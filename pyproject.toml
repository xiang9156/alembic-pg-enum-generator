[build-system]
requires = ["hatchling"]
build-backend = "hatchling.build"

[project]
name = "alembic-pg-enum-generator"
version = "1.0.5"
description = "Lightweight Alembic extension for PostgreSQL enum value additions using ALTER TYPE ... ADD VALUE."
readme = "README.md"
license = "MIT"
authors = [
    {name = "Xiang Zhang", email = "xiang9156@users.noreply.github.com"},
]
maintainers = [
    {name = "Xiang Zhang", email = "xiang9156@users.noreply.github.com"},
]
classifiers = [
    "Development Status :: 4 - Beta",
    "Intended Audience :: Developers",
    "License :: OSI Approved :: MIT License",
    "Programming Language :: Python :: 3",
    "Programming Language :: Python :: 3.8",
    "Programming Language :: Python :: 3.9",
    "Programming Language :: Python :: 3.10",
    "Programming Language :: Python :: 3.11",
    "Programming Language :: Python :: 3.12",
    "Programming Language :: Python :: 3.13",
    "Topic :: Database",
    "Topic :: Software Development :: Libraries :: Python Modules",
    "Topic :: Database :: Database Engines/Servers",
]
keywords = ["alembic", "postgresql", "enum", "database", "migration", "sqlalchemy"]
dependencies = [
    "alembic>=1.0.0",
    "sqlalchemy>=1.4.0",
]
requires-python = ">=3.8"

[project.urls]
Homepage = "https://github.com/xiang9156/alembic-pg-enum-generator"
Repository = "https://github.com/xiang9156/alembic-pg-enum-generator"
Documentation = "https://github.com/xiang9156/alembic-pg-enum-generator#readme"
Issues = "https://github.com/xiang9156/alembic-pg-enum-generator/issues"
Changelog = "https://github.com/xiang9156/alembic-pg-enum-generator/blob/main/CHANGELOG.md"

[project.optional-dependencies]
dev = [
    "pytest>=6.0",
    "pytest-asyncio",
    "pytest-cov",
    "ruff",
    "mypy",
    "pre-commit",
    "twine",
    "build",
]
test = [
    "pytest>=6.0",
    "pytest-asyncio", 
    "pytest-cov",
    "psycopg2-binary",
    "docker",
]

[tool.hatch.build.targets.wheel]
packages = ["alembic_pg_enum_generator"]

[tool.hatch.version]
path = "alembic_pg_enum_generator/__init__.py"

[tool.ruff]
target-version = "py38"
line-length = 88

[tool.ruff.lint]
select = [
    "E",   # pycodestyle errors
    "W",   # pycodestyle warnings  
    "F",   # pyflakes
    "I",   # isort
    "B",   # flake8-bugbear
    "C4",  # flake8-comprehensions
    "UP",  # pyupgrade
]
ignore = [
    "E501",  # line too long, handled by black
    "B008",  # do not perform function calls in argument defaults
    "B905",  # `zip()` without an explicit `strict=` parameter
]

[tool.ruff.lint.per-file-ignores]
"__init__.py" = ["F401"]

[tool.mypy]
python_version = "3.8"
warn_return_any = true
warn_unused_configs = true
disallow_untyped_defs = true
disallow_incomplete_defs = true
check_untyped_defs = true
disallow_untyped_decorators = true
no_implicit_optional = true
warn_redundant_casts = true
warn_unused_ignores = true
warn_no_return = true
warn_unreachable = true
strict_equality = true

[[tool.mypy.overrides]]
module = [
    "alembic.*",
    "sqlalchemy.*",
]
ignore_missing_imports = true

[tool.pytest.ini_options]
testpaths = ["tests"]
python_files = ["test_*.py"]
python_classes = ["Test*"]
python_functions = ["test_*"]
addopts = [
    "-v",
    "--cov=alembic_pg_enum_generator",
    "--cov-report=term-missing",
    "--cov-report=xml",
    "--cov-report=html",
]

[tool.coverage.run]
source = ["alembic_pg_enum_generator"]
omit = [
    "*/tests/*",
    "*/test_*.py",
]

[tool.coverage.report]
exclude_lines = [
    "pragma: no cover",
    "def __repr__",
    "if TYPE_CHECKING:",
    "raise AssertionError",
    "raise NotImplementedError",
]

[dependency-groups]
dev = [
    "alembic>=1.14.1",
    "sqlalchemy>=2.0.41",
]
